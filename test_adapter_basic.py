"""Basic Test for Claude Code Adapter

A simplified test that validates core adapter functionality without
Unicode characters or speech dependencies.
"""

import asyncio
import sys
import os
from pathlib import Path

# Add src to path for imports  
sys.path.insert(0, str(Path(__file__).parent / "src"))

# Create mock types to avoid speech dependencies
from dataclasses import dataclass
from enum import Enum
from typing import Dict, Any, List, Optional

class IntentType(Enum):
    """Mock intent types"""
    CODING_REQUEST = "coding_request"
    FILE_OPERATION = "file_operation"
    SYSTEM_CONTROL = "system_control"
    QUERY_REQUEST = "query_request"

@dataclass
class ParsedIntent:
    """Mock parsed intent"""
    original_text: str
    processed_text: str
    intent_type: IntentType
    confidence: float
    entities: Dict[str, Any]
    parameters: Dict[str, Any]

@dataclass 
class Context:
    """Mock context"""
    user_id: str
    session_id: str
    current_file: Optional[str] = None
    current_app: Optional[str] = None

@dataclass
class CommandResult:
    """Mock command result"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    execution_time: Optional[float] = None

# Import the adapter
from src.adapters.claude_code_adapter import ClaudeCodeAdapter, MCPClient


async def test_mcp_client():
    """Test MCP client basic functionality"""
    print("Testing MCP Client...")
    
    client = MCPClient()
    
    # Test connection
    connected = await client.connect()
    if connected:
        print("  [OK] MCP client connected")
    else:
        print("  [FAIL] Connection failed")
        return False
    
    # Test tool discovery
    tools_count = len(client.tools_registry)
    if tools_count > 0:
        print(f"  [OK] Found {tools_count} tools")
    else:
        print("  [FAIL] No tools found")
        return False
    
    # Test tool call
    try:
        result = await client.call_tool("generate_function", {
            "name": "test_func",
            "description": "Test function",
            "language": "python"
        })
        
        if result.get("success") and "generated_code" in result:
            print("  [OK] Tool call successful")
        else:
            print("  [WARN] Tool call completed with issues")
            
    except Exception as e:
        print(f"  [FAIL] Tool call error: {e}")
        return False
    
    await client.disconnect()
    print("  [OK] Client disconnected")
    return True


async def test_adapter_init():
    """Test adapter initialization"""
    print("Testing Adapter Initialization...")
    
    config = {
        'working_directory': str(Path.cwd()),
        'security': {
            'allowed_operations': ['read', 'write', 'create', 'generate'],
            'restricted_operations': ['delete_system']
        }
    }
    
    adapter = ClaudeCodeAdapter(config)
    
    # Test properties
    if adapter.adapter_id != "claude_code":
        print("  [FAIL] Wrong adapter ID")
        return False
    print("  [OK] Adapter ID correct")
    
    if len(adapter.supported_commands) == 0:
        print("  [FAIL] No supported commands")
        return False
    print(f"  [OK] Supports {len(adapter.supported_commands)} commands")
    
    # Test initialization
    try:
        initialized = await adapter.initialize()
        if initialized:
            print("  [OK] Initialization successful")
        else:
            print("  [WARN] Initialization had issues")
        
        # Test availability
        available = await adapter.is_available()
        print(f"  [INFO] Adapter available: {available}")
        
        await adapter.cleanup()
        print("  [OK] Cleanup successful")
        
    except Exception as e:
        print(f"  [FAIL] Initialization error: {e}")
        return False
    
    return True


async def test_file_operations():
    """Test file operations"""
    print("Testing File Operations...")
    
    adapter = ClaudeCodeAdapter()
    await adapter.initialize()
    
    test_file = Path("test_output.py")
    test_content = '''# Generated by Voice Programming Test
def hello_world():
    """Test function"""
    print("Hello from voice programming!")
    return True

if __name__ == "__main__":
    hello_world()
'''
    
    try:
        # Test file creation
        result = await adapter.execute_command("create_file", {
            "file_path": str(test_file),
            "content": test_content
        })
        
        if result.success:
            print("  [OK] File creation successful")
        else:
            print(f"  [FAIL] File creation failed: {result.error}")
            return False
        
        # Test file reading
        result = await adapter.execute_command("read_file", {
            "file_path": str(test_file)
        })
        
        if result.success and "hello_world" in result.data.get("content", ""):
            print("  [OK] File reading successful")
        else:
            print(f"  [FAIL] File reading failed: {result.error}")
            return False
        
        # Cleanup
        if test_file.exists():
            test_file.unlink()
            print("  [OK] Test file cleaned up")
            
    except Exception as e:
        print(f"  [FAIL] File operations error: {e}")
        return False
    finally:
        await adapter.cleanup()
    
    return True


async def test_code_generation():
    """Test code generation"""
    print("Testing Code Generation...")
    
    adapter = ClaudeCodeAdapter()
    await adapter.initialize()
    
    try:
        # Test function generation
        result = await adapter.execute_command("generate_function", {
            "name": "calculate_area",
            "description": "Calculate rectangle area",
            "language": "python"
        })
        
        if result.success:
            code = result.data.get("generated_code", "")
            if "def calculate_area" in code:
                print("  [OK] Function generation successful")
            else:
                print("  [WARN] Function generated but unexpected format")
        else:
            print(f"  [FAIL] Function generation failed: {result.error}")
            return False
        
        # Test class generation
        result = await adapter.execute_command("generate_class", {
            "name": "Calculator",
            "description": "Simple calculator class",
            "language": "python"
        })
        
        if result.success:
            code = result.data.get("generated_code", "")
            if "class Calculator" in code:
                print("  [OK] Class generation successful")
            else:
                print("  [WARN] Class generated but unexpected format")
        else:
            print(f"  [WARN] Class generation had issues: {result.error}")
        
    except Exception as e:
        print(f"  [FAIL] Code generation error: {e}")
        return False
    finally:
        await adapter.cleanup()
    
    return True


async def test_project_analysis():
    """Test project analysis"""
    print("Testing Project Analysis...")
    
    adapter = ClaudeCodeAdapter()
    await adapter.initialize()
    
    try:
        result = await adapter.execute_command("analyze_project", {
            "project_path": str(Path.cwd())
        })
        
        if result.success:
            info = result.data.get("project_info", {})
            print(f"  [OK] Project analysis successful")
            print(f"    Project type: {info.get('type', 'unknown')}")
            print(f"    Total files: {info.get('total_files', 0)}")
            print(f"    Python files: {info.get('python_files', 0)}")
            print(f"    Has Git: {info.get('has_git', False)}")
        else:
            print(f"  [FAIL] Project analysis failed: {result.error}")
            return False
            
    except Exception as e:
        print(f"  [FAIL] Project analysis error: {e}")
        return False
    finally:
        await adapter.cleanup()
    
    return True


async def test_security():
    """Test security features"""
    print("Testing Security Features...")
    
    config = {
        'security': {
            'restricted_operations': ['delete', 'system_admin'],
            'allowed_operations': ['read', 'write', 'create']
        }
    }
    
    adapter = ClaudeCodeAdapter(config)
    await adapter.initialize()
    
    try:
        # Test dangerous command blocking
        result = await adapter.execute_command("run_bash_command", {
            "command": "rm -rf /"
        })
        
        if not result.success:
            print("  [OK] Dangerous command blocked")
        else:
            print("  [FAIL] Security issue: dangerous command allowed")
            return False
        
        # Test safe command
        result = await adapter.execute_command("generate_function", {
            "name": "safe_function",
            "description": "Safe operation test"
        })
        
        if result.success:
            print("  [OK] Safe operation allowed")
        else:
            print(f"  [WARN] Safe operation had issues: {result.error}")
        
    except Exception as e:
        print(f"  [FAIL] Security test error: {e}")
        return False
    finally:
        await adapter.cleanup()
    
    return True


async def main():
    """Run all tests"""
    print("Claude Code Adapter Tests")
    print("=" * 40)
    
    tests = [
        ("MCP Client", test_mcp_client),
        ("Adapter Init", test_adapter_init),
        ("File Operations", test_file_operations),
        ("Code Generation", test_code_generation),
        ("Project Analysis", test_project_analysis),
        ("Security", test_security)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            if result:
                print(f"{test_name}: PASSED")
                passed += 1
            else:
                print(f"{test_name}: FAILED")
        except Exception as e:
            print(f"{test_name}: ERROR - {e}")
        print()
    
    print("=" * 40)
    print(f"Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("All tests PASSED! Claude Code Adapter is working!")
    else:
        print(f"{total - passed} tests failed. Check the output above.")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)